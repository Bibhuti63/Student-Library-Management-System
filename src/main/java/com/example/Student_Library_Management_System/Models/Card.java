package com.example.Student_Library_Management_System.Models;

import com.example.Student_Library_Management_System.Enums.CardStatus;
import jakarta.persistence.*;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.util.Date;

@Entity
@Table(name = "card_info")
public class Card {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY) //autogenerated id as primary key
    private int id;

    @CreationTimestamp //Auto time stamp creation time
    private Date createOn;

    @UpdateTimestamp //set the time when the entity is updated
    private Date updatedOn;

    @Enumerated(value = EnumType.STRING) //storing the enum in form of string in sql table
    private CardStatus cardStatus;
    //its necessary to have getter and setter of cardstatus variable


    //mapping
    @OneToOne
    @JoinColumn //join by adding a foreign key coloumn//here foreign key is default i.e primary key of Student
    private Student studentVariableName; //this variable will be used in Student class while doing bidirectional maping
    //its necessary to have getter and setter of studentVariableName variable

    //constructor
    public Card() {
    }

    //getter and setter

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public Date getCreateOn() {
        return createOn;
    }

    public void setCreateOn(Date createOn) {
        this.createOn = createOn;
    }

    public Date getUpdatedOn() {
        return updatedOn;
    }

    public void setUpdatedOn(Date updatedOn) {
        this.updatedOn = updatedOn;
    }

    public CardStatus getCardStatus() {
        return cardStatus;
    }

    public void setCardStatus(CardStatus cardStatus) {
        this.cardStatus = cardStatus;
    }

    public Student getStudentVariableName() {
        return studentVariableName;
    }

    public void setStudentVariableName(Student studentVariableName) {
        this.studentVariableName = studentVariableName;
    }
}
